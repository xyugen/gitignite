package main

import (
	"encoding/base64"
	"encoding/json"
	"fmt"
	"io"
	"log"
	"net/http"
	"os"
	"strings"

	"github.com/urfave/cli/v2"
	"golang.org/x/text/cases"
	"golang.org/x/text/language"
)

const RepositoryURL = "https://api.github.com/repos/github/gitignore"

// decodeBase64Response decodes a base64-encoded response and returns the decoded contents.
//
// It takes in a byte slice containing the response and returns a byte slice with the decoded contents.
// The function returns an error if there is an issue parsing the JSON or decoding the base64 content.
func decodeBase64Response(content string) ([]byte, error) {
	// Check if the language exists
	if content == "" {
		return nil, fmt.Errorf("language not found")
	}

	contents, err := base64.StdEncoding.DecodeString(content)
	if err != nil {
		return nil, fmt.Errorf("error decoding base64: %s", err)
	}

	return contents, nil
}

// DecodeJSONResponse decodes a JSON response and returns a map[string]string and an error.
func decodeJSONResponse(response []byte) (string, error) {
	var result struct {
		Content string `json:"content"`
	}

	err := json.Unmarshal(response, &result)
	if err != nil {
		return "", fmt.Errorf("error parsing JSON: %s", err)
	}

	return result.Content, err
}

func decodeJSONResponseArray(response []byte) ([]string, error) {
	var results []struct {
		Name string `json:"name"`
	}

	err := json.Unmarshal(response, &results)
	if err != nil {
		return nil, fmt.Errorf("error parsing JSON: %s", err)
	}

	decodedResponses := make([]string, len(results))
	for i, result := range results {
		decodedResponses[i] = result.Name
	}

	return decodedResponses, nil
}

// addCredits adds credits to the given contents.
//
// It takes a byte slice as input parameter.
// It returns a byte slice.
func addCredits(contents []byte, noCredits bool) []byte {
	if noCredits {
		return contents
	}
	return append([]byte("# Generated by gitignite\n# Template: https://github.com/github/gitignore\n\n"), contents...)
}

// fetchGitignore fetches the .gitignore file for a given language.
//
// It takes a string parameter `lang` which specifies the language for which the .gitignore file should be fetched.
// The function returns a byte slice containing the contents of the .gitignore file for the specified language, along with an error if any.
func fetchGitignore(lang string) ([]byte, error) {
	languages, err := fetchLanguages()
	if err != nil {
		return nil, err
	}

	for _, language := range languages {
		if strings.HasSuffix(language, ".gitignore") {
			language = strings.TrimSuffix(language, ".gitignore")
			if strings.EqualFold(strings.ToLower(language), strings.ToLower(lang)) {
				url := fmt.Sprintf("%s/contents/%s.gitignore", RepositoryURL, language)
				response, err := http.Get(url)
				if err != nil {
					return nil, err
				}
				defer response.Body.Close()

				body, err := io.ReadAll(response.Body)
				if err != nil {
					return nil, err
				}

				jsonContents, err := decodeJSONResponse(body)
				contents, err := decodeBase64Response(jsonContents)
				if err != nil {
					return nil, err
				}

				return contents, nil
			}
		}
	}

	return nil, fmt.Errorf("language not found")
}

// Fetch available languages.
func fetchLanguages() ([]string, error) {
	url := fmt.Sprintf("%s/contents", RepositoryURL)
	response, err := http.Get(url)
	if err != nil {
		return []string{}, err
	}
	defer response.Body.Close()

	body, err := io.ReadAll(response.Body)
	if err != nil {
		return []string{}, err
	}

	jsonContents, err := decodeJSONResponseArray(body)
	if err != nil {
		return []string{}, err
	}

	return jsonContents, nil
}

func main() {
	app := &cli.App{
		Name:  "gitignite",
		Usage: "generate .gitignore file from a template",
		Commands: []*cli.Command{
			{
				Name:    "init",
				Aliases: []string{"i"},
				Usage:   "generate .gitignore file from a language template",
				Action:  initCommand,
				Flags: []cli.Flag{
					&cli.BoolFlag{
						Name:    "no-credits",
						Aliases: []string{"nc"},
						Usage:   "Do not add credits to the generated .gitignore file",
						Value:   false,
					},
				},
			},
			{
				Name:    "langs",
				Aliases: []string{"l"},
				Usage:   "list available languages",
				Action:  listLanguages,
			},
		},
	}

	if err := app.Run(os.Args); err != nil {
		log.Fatal(err)
	}
}

func initCommand(ctx *cli.Context) error {
	caser := cases.Title(language.English)
	// Titlecase and trim the string so that it matches the template file name
	language := caser.String(strings.Trim(ctx.Args().First(), " "))
	if language == "" {
		return fmt.Errorf("lang is required")
	}

	noCredits := ctx.Bool("no-credits")

	content, err := fetchGitignore(language)
	if err != nil {
		fmt.Println("Error fetching gitignore content:", err)
		return nil
	}

	content = addCredits(content, noCredits)

	if err := os.WriteFile(".gitignore", content, 0644); err != nil {
		fmt.Println("Error creating .gitignore file:", err)
		return nil
	} else {
		fmt.Println(".gitignore file created successfully!")
	}
	return nil
}

func listLanguages(ctx *cli.Context) error {
	languages, err := fetchLanguages()
	if err != nil {
		fmt.Println("Error fetching languages:", err)
		return nil
	}

	fmt.Println("Available languages:")
	for _, language := range languages {
		// Don't accept strings without gitignore at the end and a string before that
		if strings.HasSuffix(language, ".gitignore") {
			// Take only strings with .gitignore at the end
			language = strings.TrimSuffix(language, ".gitignore")
			fmt.Println(language)
		}
	}

	return nil
}
